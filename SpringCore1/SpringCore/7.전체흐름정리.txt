1. 새로운 할인 정책 개발 --> 다형성 덕분에 정률 할인 정책 코드를 추가로 개발하는 자체는 아무 문제가 없었음
2. 그런데 새로운 할인정책을 애플리케이션에 반영할때, 클라이언트인 주문 서비스도 구현체도 함께 변경해야하는 문제가 발생했음 --> OCP 위반
    --> 왜냐하면 클라이언트코드인 OrderServiceImpl 이 인터페이스인 DiscountPolicy 뿐만 아니라, 구현체인 FixDiscountPolicy 도 함꼐 의존했기 때문임 --> DIP 위반
    --> 클라이언트코드인 OrderServiceImpl 가 너무많은 역할을 하고있었던 것임. (주문하는기능, FixDiscountPolicy 객체도 생성하고 등등)
3. 따라서 관심사를 분리하여 (객체를 생성하고 연결하는 역할과 실행하는 역할이 명확히 하였음)
    - 애플리케이션을 하나의 공연으로 생각
    - 기존에는 클라이언트가 의존하는 서버 구현 객체를 직접 생성하고, 실행함
    - 비유를 하면 기존에는 남자 주인공 배우가 공연도 하고, 동시에 여자 주인공도 직접 초빙하는 다양한 책임을가지고 있음
    - 공연을 구성하고, 담당 배우를 섭외하고, 지정하는 책임을 담당하는 별도의 공연 기획자가 나올 시점
    - 공연 기획자인 AppConfig 가 등장
    - AppConfig 는 애플리케이션의 전체 동작 방식을 구성(config)하기 위해, 구현 객체를 생성하고, 연결하는책임
    - 이제부터 클라이언트 객체는 자신의 역할을 실행하는 것만 집중, 권한이 줄어듬(책임이 명확해짐)
4. AppConfig 의 리펙터링
    - 구성 정보에서 역할과 구현을 명확하게 분리
    - 역할이 잘 들어남
    - 중복 제거
5. 새로운 구조와 할인 정책 적용
    - 덕분에 애플리케이션이 크게 사용영역과 객체를 생성하고 구성하는 역역으로 분리됨.
    - 따라서 할인 정책을 변경해도 AppConfig 가 있는 구성영역만 변경하면되고, 사용 영역을 변경할 필요가 없음.
      물론 클라이언트 코드인 주문 서비스 코드도 변경하지 않음

결론 --> AppConfig 로 애플리케이션이 크게 사용영역과 객체를 생성하고 구성하는 역역으로 분리되었고, 이로인해 DIP 와 OCP 원칙을 지킬 수 있었음.