// 관심사의 분리
- 애플리케이션을 하나의 공연이라 생각해보자. 각각의 인터페이스를 배역(배우 역할)이라 생각하자. 그런데! 실제 배역 맞는 배우를 선택하는 것은 누가 하는가?
- 로미오와 줄리엣 공연을 하면 로미오 역할을 누가 할지 줄리엣 역할을 누가 할지는 배우들이 정하는게아니다.
  이전 코드는 마치 로미오 역할(인터페이스)을 하는 레오나르도 디카프리오(구현체, 배우)가 줄리엣역할(인터페이스)을 하는 여자 주인공(구현체, 배우)을 직접 초빙하는 것과 같다.
  디카프리오는 공연도해야하고 동시에 여자 주인공도 공연에 직접 초빙해야 하는 다양한 책임을 가지고 있다.


// 관심사를 분리하자
- 배우는 본인의 역할인 배역을 수행하는 것에만 집중해야 한다.
- 디카프리오는 어떤 여자 주인공이 선택되더라도 똑같이 공연을 할 수 있어야 한다.
- 공연을 구성하고, 담당 배우를 섭외하고, 역할에 맞는 배우를 지정하는 책임을 담당하는 별도의 공연기획자가 나올시점이다.
- 공연 기획자를 만들고, 배우와 공연 기획자의 책임을 확실히 분리하자.
--> 인터페이스에 어떤구현체가 할당될지는 공연기획자(AppConfig) 가 결정해야한다.


// AppConfig 의 등장.
- 애플리케이션의 전체 동작 방식을 구성(config)하기 위해, 구현 객체를 생성하고, 연결하는 책임을 가지는 별도의 설정 클래스를 의미함.
--> 공현기획자의 역할을 하는 것임.
--> 애플리케이션의 실제 동작에 필요한 구현 객체를 생성하는 일을함.
--> 생성한 객체 인스턴스의 참조(래퍼런스) 를 생성자를 통해서 주입(연결) 해준다.
--> 객체의 생성과 연결을 담당.


// 이점
1. DIP 완성 --> MemberServiceImpl 은 MemberRepository 인 추상에만 의존하면 됨. --> 이제 구체 클래스를 몰라도 됨.
2. 관심사의 분리 : 객체를 생성하고 연결하는 역할과 실행하는 역할이 명확리 분리됨.


// 정리
- AppConfig 를 통해서 관심사를 확실하게 분리했다.
- 배역, 배우를 생각해보자.
        : AppConfig 는 공연 기획자다.
        : AppConfig 는 구체 클래스를 선택한다. 배역에 맞는 담당 배우를 선택한다. 애플리케이션이 어떻게 동작해야 할지 전체 구성을 책임진다.
- 이제 각 배우들은 담당 기능을 실행하는 책임만 지면 된다.
- OrderServiceImpl 은 기능을 실행하는 책임만 지면 된다
