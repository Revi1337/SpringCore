// 조회된 Bean 이 두개 이상일때 문제.
- @Autowired 는 타입(Type)으로 조회한다. 타입으로 조회하기 때문에, 마치 다음 코드와 유사하게 동작한다. (실제로는 더 많은 기능을 제공한다.)
    --> Ex) `ac.getBean(DiscountPolicy.class)`
- 스프링 빈 조회에서 학습했듯이 타입으로 조회하면 선택된 빈이 2개 이상일 때 문제가 발생한다.
    --> Ex) FixDiscountPolicy, RateDiscountPolicy 모두 @Component 을 사용해서 Bean 으로 만든 후,
            두개의 공통 부모인 DiscountPolicy 타입의 의존성을 주입받는 다른 클래스에서 `@Autowired private DiscountPolicy discountPolicy` 를 사용하면 익셉션이 터짐
    --> expected single matching bean but found 2  --> 단일개의 bean 이 기대됬지만 2개가 발견됬다는 Exception (Caused By NoUniqueBeanDefinitionException)
- 이때 하위 타입으로 지정할 수도 있지만, 하위 타입으로 지정하는 것은 DIP 를 위배하고 유연성이 떨어진다. 그리고 이름만 다르고,
  완전히 똑같은 타입의 스프링 빈이 2개 있을 때 해결이 안된다. 스프링 빈을 수동 등록해서 문제를 해결해도 되지만, 의존 관계 자동 주입에서 해결하는 여러 방법이 있다.


// 조회된 Bean 이 두개 이상일때 문제해결방법 - @Autowired 필드명, @Qualifier, @Primary
- 조회된 Bean 이 두개 이상이어서 익셉션이 터졌을 때, 해결방법은 크게 3가지가 있다.
    1. @Autowired 필드 명 매칭
    2. @Qualifier -> @Qualifier 끼리 매칭 -> 빈 이름 매칭
    3. @Primary 사용

===================================================================================================================
// @Autowired 필드 명 매칭
- @Autowired 는 타입 매칭을 시도하고, 이때 같은 타입의 Bean 이 여러개 있으면, 필드이름, 파라미터 이름으로 Bean 이름을 추가매칭한다.
    --> Ex) 파라미터 이름으로 추가매칭 예
            ```java (기존코드)
            @Autowired
            public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy discountPolicy) {
                this.memberRepository = memberRepository;
                this.discountPolicy = rateDiscountPolicy;
            }
            ```
            ```java (파라미터 명을 Bean 이름으로 변경)
            @Autowired
            public OrderServiceImpl(MemberRepository memberRepository, DiscountPolicy rateDiscountPolicy) {
                this.memberRepository = memberRepository;
                this.discountPolicy = rateDiscountPolicy;
            }
            ```
    --> --> 결과 : 기존코드에서 파라미터명을 존재하는 Bean 이름으로 변경하면, 파라미터명이 rateDiscountPolicy 이므로 의존성이 정상 주입된다.
    --> --> 이유 : @Component 로 등록한 RateDiscountPolicy 는 결국 Bean 이름이 rateDiscountPolicy 이다.
                  @Autowired 가 타입매칭시도 후, 필드이름 혹은 파라미터 명으로 추가 매칭을 시도하는데, 파라미터 이름과 동일한 이름의
                  rateDiscountPolicy Bean 이 존재하기 때문에 정상 주입되는 것이다.
    --> Ex) 필드 이름으로 추가매칭 예
            ```java (기존코드)
            @Autowired private DiscountPolicy discountPolicy;
            ```
            ```java (필드 명을 Bean 이름으로 변경)
            @Autowired private DiscountPolicy rateDiscountPolicy;
            ```
****** @Autowired 매칭 정리 ******
1. 타입 매칭
    --> 조회된 타입의 Bean 이 한개이면, Bean 이름을 보지않고 무조건 주입
2. 타입 매칭의 결과가 2개 이상일 때 필드 명, 파라미터 명으로 빈 이름 매칭
    --> 본인과 같은 타입이거나 그타입의 자식들이 모두 조회되면 --> 필드명 혹은 파라미터명으로 Bean 이름 추가 매칭
*********************************

===================================================================================================================
// Qualifier 사용
- @Qualifier 는 추가 구분자(식별자)를 붙여주는 방법이다. 주입시 추가적인 방법을 제공하는 것이지 Bean 이름을 변경하는 것은 아니다.
  (Bean 을 구분할 수 있는 추가적인 옵션을 제공하는것이라 보면 됨.)

1. Bean 등록 시 @Qualifier 를 붙여준다. (직접 빈 등록시(@Bean)에도 @Qualifier 를 동일하게 사용할 수 있다)
    ```java (Bean 등록 시)
    @Component @Qualifier("mainDiscountPolicy")
    public class RateDiscountPolicy implements DiscountPolicy {}
    ```
    ```
    @Component @Qualifier("fixDiscountPolicy")
    public class FixDiscountPolicy implements DiscountPolicy {}
    ```

2. 주입시에 @Qualifier 를 붙여주고 등록한 이름을 적어준다. (생성자 자동 주입, 수정자=세터 자동 주입 모두 가능하다.)
    ```java (생성자 자동 주입)
    @Autowired
    public OrderServiceImpl(MemberRepository memberRepository, @Qualifier("mainDiscountPolicy") DiscountPolicy discountPolicy) {
         this.memberRepository = memberRepository;
         this.discountPolicy = discountPolicy;
    }
    ```
    ```java (수정=세터 자동 주입 예시)
    @Autowired
    public DiscountPolicy setDiscountPolicy(@Qualifier("mainDiscountPolicy") DiscountPolicy discountPolicy) {
        this.discountPolicy = discountPolicy;
    }
    ```
****** @Qualifier 매칭 주의 & 정리 ******
1. 주의
    --> @Qualifier 로 의존성을 주입할 때 @Qualifier("mainDiscountPolicy") 를 찾지못하면,
        mainDiscountPolicy 라는 이름의 스프링 Bean 을 추가로 찾는다.
        (@Autowired 가 타입매칭시, 2개 이상의 Bean 이 조회되어, 필드 이름 혹은 파라미터 이름과 일치하는 Bean 을 추가적으로 검사하는 것과 같은 원리.)
    --> 하지만 경험상 @Qualifier 는 @Qualifier 를 찾는 용도로만 사용하는게 명확하고 좋다. (@Qualifier 끼리 찾는것을 추천한다.)
2. 정리
    --> 1. @Qualifier 끼리 매칭한다. 없으면? 2번
    --> 2. 빈 이름 매칭. 없으면? 3번
    --> 3. NoSuchBeanDefinitionException 예외 발생
*********************************
