// 컴포넌트 스캔과 의존관계 자동 주입
- 지금까지 스프링 빈을 등록할 때는 자바 코드의 @Bean 이나 XML 의 <bean> 등을 통해서 설정 정보에 직접 등록할 스프링 빈을 나열했다.
- 예제에서는 몇개가 안되었지만, 이렇게 등록해야 할 스프링 빈이 수십, 수백개가 되면 일일이 등록하기도 귀찮고, 설정 정보도 커지고, 누락하는 문제도 발생한다
- 그래서 스프링은 설정 정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공한다.
- 또 의존관계도 자동으로 주입하는 @Autowired 라는 기능도 제공한다
- 컴포넌트 스캔을 사용하려면 먼저 @ComponentScan 을 설정 정보에 붙여주면 된다.
    --> 기존의 AppConfig 와는 다르게 @Bean 으로 등록한 클래스가 하나도 없다.
**** 참고 ****
컴포넌트 스캔을 사용하면 @Configuration 이 붙은 설정 정보도 자동으로 등록되기 때문에, AppConfig, TestConfig 등 앞서
만들어두었던 설정 정보도 함께 등록되고, 실행되어 버린다. 그래서 excludeFilters 를 이용해서 설정정보는 컴포넌트 스캔 대상에서 제외했다.
보통 설정 정보를 컴포넌트 스캔 대상에서 제외하지는 않지만, 기존 예제 코드를 최대한 남기고 유지하기 위해서 이 방법을 선택했다.


// @ComponentScan
- 컴포넌트 스캔을 사용하려면 먼저 @ComponentScan 을 설정 정보에 붙여주면 된다.
- 컴포넌트 스캔은 이름 그대로 @Component 애노테이션이 붙은 클래스를 스캔해서 `스프링컨테이너에 빈으로 등록`한다. (빈으로 만들고싶은 클래스에 @Component 를 붙여주면 된다.)
    --> @Configuration 이 컴포넌트 스캔의 대상이 된 이유도 @Configuration 소스코드를 열어보면 @Component 애노테이션이 붙어있기 때문이다.
- @ComponentScan 를 달아준 클래스내부에서 의존하는 클래스 혹은 생성자에 @Autowired 를 달아준다.
    --> 이전에 AppConfig 에서는 @Bean 으로 직접 설정 정보를 작성했고, 의존관계도 직접 명시했었다. 하지만 이제는 이런 설정 정보 자체가 없기 때문에, 의존관계 주입도 이 클래스 안에서 해결해야 한다.
    --> 이 의존관계를 자동으로 주입해주는것이 @Autowired 의 역할이다.
        @Autowired 를 사용하면 생성자에서 여러 의존관계도 한번에 주입받을 수 있다.


// @ComponentScan 세부
- @ComponentScan 은 @Component 가 붙은 모든 클래스를 스프링 빈으로 등록한다.
- 이 때 스프링 Bean 의 기본 이름은 클래스명을 사용하되 맨 앞글자만 소문자를 사용한다.
    : 빈이름 기본 전략 : MemberServiceImpl 클래스 --> memberServiceImpl
    : 빈이름 직접 지정 : 만약 스프링 Bean 의 이름을 직접 지정하고 싶으면 @Component("memberService2") 이런식으로 이름을 부여하면 됨.


// @Autowired 의존관계 자동 주입
- 생성자에 @Autowired 를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.
- 이때 기본 조회 전략은 타입이 같은 빈을 찾아서 주입한다.
    : getBean(MemberRepository.class) 와 동일하다고 이해하면 됨.
    : 여기서 조심해야할것은  MemberRepository 타입의 빈이 여러개있으면 충돌(MemberRepository 는 부모니까 자식들도 주입될 수 있는 Bean 후보에 포함)--> @Qualifier 필요. --> 자세한건 나중에
    ```java
    @Autowired
    public MemberServiceImpl(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }
    ```

// @ComponentScan 와 @Autowired 사용시 로그
- @ComponentScan 를 사용하면 스프링컨테이너를 초기화시킬때, 로그가 약간 다름
    1. annotation.ClassPathBeanDefinitionScanner - Identified candidate component class --> Component 스캔의 후보를 발견했어
    2. Autowiring by type from bean name 'orderServiceImpl' via constructor to bean named 'memoryMemberRepository' --> orderServiceImpl 빈에 memoryMemberRepository 가 주입되었어


// 탐색 위치
- 모든 자바 클래스를 다 컴포넌트 스캔하면 시간이 오래 걸린다. 그래서 꼭 필요한 위치부터 탐색하도록 시작위치를 지정할 수 있다. (탐색할 패키지의 시작 위치 지정)
  여러 시작위치를 지정할 수도 있다.
    --> @ComponentScan(basePackages = "hello.core")
    --> @ComponentScan(basePackages = {"hello.core"})
- 지정한 클래스의 패키지를 탐색 위치로 지정할수도 있다. (만약 지정하지 않으면 @ComponentScan 이 붙은 설정 정보 클래스의 패키지가 시작 위치가 된다.)
    --> @ComponentScan(basePackageClasses = AutoAppConfig.class)
**** 권장방법 ****
패키지 위치를 지정하지 않고, 설정정보 클래스의 위치를 프로젝트 최상단에 두는 것임. (SpringBoot 도 이 방법을 기본으로 사용함.)
--> 예를 들어서 프로젝트가 다음과 같이 구조가 되어 있으면 com.hello, com.hello.service, com.hello.repository
    프로젝트 시작 루트인 com.hello 패키지에 AppConfig 같은 메인 설정 정보를 두고, @ComponentScan 애노테이션을 붙이고, basePackages 지정은 생략한다
--> 이렇게 하면 com.hello 를 포함한 하위는 모두 자동으로 컴포넌트 스캔의 대상이 된다. 그리고 프로젝트 메인 설정 정보는 프로젝트를 대표하는 정보이기 때문에
    프로젝트 시작 루트 위치에 두는 것이 좋다. 참고로 스프링 부트를 사용하면 스프링 부트의 대표 시작 정보인 @SpringBootApplication 를 이
    프로젝트 시작 루트 위치에 두는 것이 관례이다. (그리고 이 설정안에 바로 @ComponentScan 이 들어있다)


// 탐색 기본 대상
- 컴포넌트 스캔은 @Component 뿐만 아니라 다음과 내용도 추가로 대상에 포함한다.
    @Component : 컴포넌트 스캔에서 사용
    @Controller : 스프링 MVC 컨트롤러에서 사용
    @Service : 스프링 비즈니스 로직에서 사용
    @Repository : 스프링 데이터 접근 계층에서 사용
    @Configuration : 스프링 설정 정보에서 사용
**** 참고 ****
- 사실 애노테이션에는 상속관계라는 것이 없다. 그래서 이렇게 애노테이션이 특정 애노테이션을 들고 있는 것을 인식할 수 있는 것은 자바 언어가 지원하는 기능은 아니고, 스프링이 지원하는 기능임.
- 컴포넌트 스캔의 용도 뿐만 아니라 다음 애노테이션이 있으면 스프링은 부가 기능을 수행한다.
    @Controller : 스프링 MVC 컨트롤러로 인식
    @Repository : 스프링 데이터 접근 계층으로 인식하고, 데이터 계층의 예외를 스프링 예외로 변환해준다.
    @Configuration : 앞서 보았듯이 스프링 설정 정보로 인식하고, 스프링 빈이 싱글톤을 유지하도록 추가처리를 한다.
    @Service : 사실 @Service 는 특별한 처리를 하지 않는다. 대신 개발자들이 핵심 비즈니스 로직이 여기에 있겠구나 라고 비즈니스 계층을 인식하는데 도움이 된다.
참고: useDefaultFilters 옵션은 기본으로 켜져있는데, 이 옵션을 끄면 기본 스캔 대상들이 제외된다. 그냥 이런 옵션이 있구나 정도 알고 넘어가자


// Filter (필터)
1. includeFilters : 컴포넌트 스캔 대상을 추가로 지정한다.
2. excludeFilters : 컴포넌트 스캔에서 제외할 대상을 지정한다.
```
@ComponentScan(
            includeFilters = @Filter(type = FilterType.ANNOTATION, classes = MyIncludeComponent.class),
            excludeFilters = @Filter(type = FilterType.ANNOTATION, classes = MyExcludeComponent.class)
)
```
```
--> @Filter 에서 FilterType 옵션
--> FilterType 은 5가지 옵션이 있다.
        : ANNOTATION: 기본값, 애노테이션을 인식해서 동작 (ex) org.example.SomeAnnotation
        : ASSIGNABLE_TYPE: 지정한 타입과 자식 타입을 인식해서 동작 (ex) org.example.SomeClass
        : ASPECTJ: AspectJ 패턴 사용 (ex) org.example..*Service+
        : REGEX: 정규 표현식 (ex) org\.example\.Default.*
        : CUSTOM: TypeFilter 이라는 인터페이스를 구현해서 처리 (ex) org.example.MyTypeFilter
                  예를 들어서 BeanA도 빼고 싶으면 다음과 같이 추가하면 된다
                  excludeFilters = {
                        @Filter(type = FilterType.ANNOTATION, classes = MyExcludeComponent.class),
                        @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = BeanA.class)          // BeanA 빈도 빠짐.
                  }
```
**** 참고 ****
- @Component 면 충분하기 때문에, includeFilters 를 사용할 일은 거의 없다. excludeFilters 는 여러가지 이유로 간혹 사용할 때가 있지만 많지는 않다.
- 특히 최근 스프링 부트는 컴포넌트 스캔을 기본으로 제공하는데, 개인적으로는 옵션을 변경하면서 사용하기보다는 스프링의 기본 설정에 최대한 맞추어 사용하는 것을 권장하고, 선호하는 편이다


// 중복 등록과 충돌
- @ComponentScan 에서 같은 빈 이름을 등록하면 어떻게 될까?
    : 예를 들어, 다음 두가지 상황이 있다
    1. 자동 빈 등록 vs 자동 빈 등록
     --> ConflictingBeanDefinitionException Exception 터짐
    2. 수동 빈 등록 vs 자동 빈 등록
     --> 수등으로 등록한 Bean 이름으로 Overriding 됨.
     --> Overriding bean definition for bean 'memoryMemberRepository' with a different definition: replacing
- 물론 개발자가 의도적으로 이런 결과를 기대했다면, 자동 보다는 수동이 우선권을 가지는 것이 좋다. 하지만 현실은 개발자가 의도적으로 설정해서 이런 결과가
  만들어지기 보다는 여러 설정들이 꼬여서 이런 결과가 만들어지는 경우가 대부분이다! 그러면 정말 잡기 어려운 버그가 만들어진다. 항상 잡기 어려운 버그는 애매한 버그다.
  그래서 최근 스프링 부트에서는 수동 빈 등록과 자동 빈 등록이 충돌나면 오류가 발생하도록 기본 값을 바꾸었다

**** 수동 빈 등록, 자동 빈 등록 오류시 스프링 부트 에러
Consider renaming one of the beans or enabling overriding by setting spring.main.allow-bean-definition-overriding=true
