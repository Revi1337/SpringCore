// 컴포넌트 스캔과 의존관계 자동 주입
- 지금까지 스프링 빈을 등록할 때는 자바 코드의 @Bean 이나 XML 의 <bean> 등을 통해서 설정 정보에 직접 등록할 스프링 빈을 나열했다.
- 예제에서는 몇개가 안되었지만, 이렇게 등록해야 할 스프링 빈이 수십, 수백개가 되면 일일이 등록하기도 귀찮고, 설정 정보도 커지고, 누락하는 문제도 발생한다
- 그래서 스프링은 설정 정보가 없어도 자동으로 스프링 빈을 등록하는 컴포넌트 스캔이라는 기능을 제공한다.
- 또 의존관계도 자동으로 주입하는 @Autowired 라는 기능도 제공한다
- 컴포넌트 스캔을 사용하려면 먼저 @ComponentScan 을 설정 정보에 붙여주면 된다.
    --> 기존의 AppConfig 와는 다르게 @Bean 으로 등록한 클래스가 하나도 없다.

**** 참고 ****
컴포넌트 스캔을 사용하면 @Configuration 이 붙은 설정 정보도 자동으로 등록되기 때문에, AppConfig, TestConfig 등 앞서
만들어두었던 설정 정보도 함께 등록되고, 실행되어 버린다. 그래서 excludeFilters 를 이용해서 설정정보는 컴포넌트 스캔 대상에서 제외했다.
보통 설정 정보를 컴포넌트 스캔 대상에서 제외하지는 않지만, 기존 예제 코드를 최대한 남기고 유지하기 위해서 이 방법을 선택했다.

// @ComponentScan
- 컴포넌트 스캔을 사용하려면 먼저 @ComponentScan 을 설정 정보에 붙여주면 된다.
- 컴포넌트 스캔은 이름 그대로 @Component 애노테이션이 붙은 클래스를 스캔해서 `스프링컨테이너에 빈으로 등록`한다. (빈으로 만들고싶은 클래스에 @Component 를 붙여주면 된다.)
    --> @Configuration 이 컴포넌트 스캔의 대상이 된 이유도 @Configuration 소스코드를 열어보면 @Component 애노테이션이 붙어있기 때문이다.
- @ComponentScan 를 달아준 클래스내부에서 의존하는 클래스 혹은 생성자에 @Autowired 를 달아준다.
    --> 이전에 AppConfig 에서는 @Bean 으로 직접 설정 정보를 작성했고, 의존관계도 직접 명시했었다. 하지만 이제는 이런 설정 정보 자체가 없기 때문에, 의존관계 주입도 이 클래스 안에서 해결해야 한다.
    --> 이 의존관계를 자동으로 주입해주는것이 @Autowired 의 역할이다.
        @Autowired 를 사용하면 생성자에서 여러 의존관계도 한번에 주입받을 수 있다.

// @ComponentScan 세부
- @ComponentScan 은 @Component 가 붙은 모든 클래스를 스프링 빈으로 등록한다.
- 이 때 스프링 Bean 의 기본 이름은 클래스명을 사용하되 맨 앞글자만 소문자를 사용한다.
    : 빈이름 기본 전략 : MemberServiceImpl 클래스 --> memberServiceImpl
    : 빈이름 직접 지정 : 만약 스프링 Bean 의 이름을 직접 지정하고 싶으면 @Component("memberService2") 이런식으로 이름을 부여하면 됨.

// @Autowired 의존관계 자동 주입
- 생성자에 @Autowired 를 지정하면, 스프링 컨테이너가 자동으로 해당 스프링 빈을 찾아서 주입한다.
- 이때 기본 조회 전략은 타입이 같은 빈을 찾아서 주입한다.
    : getBean(MemberRepository.class) 와 동일하다고 이해하면 됨.
    : 여기서 조심해야할것은  MemberRepository 타입의 빈이 여러개있으면 충돌(MemberRepository 는 부모니까 자식들도 주입될 수 있는 Bean 후보에 포함)--> @Qualifier 필요. --> 자세한건 나중에
    ```java
    @Autowired
    public MemberServiceImpl(MemberRepository memberRepository) {
        this.memberRepository = memberRepository;
    }
    ```

// @ComponentScan 와 @Autowired 사용시 로그
- @ComponentScan 를 사용하면 스프링컨테이너를 초기화시킬때, 로그가 약간 다름
    1. annotation.ClassPathBeanDefinitionScanner - Identified candidate component class --> Component 스캔의 후보를 발견했어
    2. Autowiring by type from bean name 'orderServiceImpl' via constructor to bean named 'memoryMemberRepository' --> orderServiceImpl 빈에 memoryMemberRepository 가 주입되었어
