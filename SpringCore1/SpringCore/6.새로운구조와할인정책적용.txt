```java
private DiscountPolicy discountPolicy() {
    // return new FixDiscountPolicy();
    return new RateDiscountPolicy();
}
```
- AppConfig 에서 할인 정책 역할을 담당하는 구현을 FixDiscountPolicy RateDiscountPolicy 객체로 변경했다.
- 이제 할인 정책을 변경해도, 애플리케이션의 구성 역할을 담당하는 AppConfig 만 변경하면 된다.
- 클라이언트 코드인 OrderServiceImpl 를 포함해서 사용 영역의 어떤 코드도 변경할 필요가 없다.
- 구성 영역은 당연히 변경된다. 구성 역할을 담당하는 AppConfig 를 애플리케이션이라는 공연의 기획자로생각하자. 공연 기획자는 공연 참여자인 구현 객체들을 모두 알아야 한다.


--> 중요한것은 할인정책을 바꿀때, 구성영역(AppConfig)만 변경했을뿐, 사용역역(MemberServiceImpl, OrderServiceImpl) 은 전혀 건드리지 않았단 것이다.
--> 또한, 클라이언트 코드(OrderServiceImpl)의 변경 및 확장할때, 확장에는 열려있고, 변경에는 닫혀있는 SOLID 원칙중 OCP 원칙도 지켜진 것이다.
