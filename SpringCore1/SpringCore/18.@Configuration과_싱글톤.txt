// @Configuration 과 싱글톤

```java
@Configuration
public class AppConfig {
     @Bean
     public MemberService memberService() {
        return new MemberServiceImpl(memberRepository());
     }
     @Bean
     public OrderService orderService() {
        return new OrderServiceImpl(memberRepository(),discountPolicy());
     }
     @Bean
     public MemberRepository memberRepository() {
        return new MemoryMemberRepository();
     }
        ...
}
```
1. memberService 빈을 만드는 코드를 보면 memberRepository() 를 호출. --> 이 메서드를 호출하면 new MemoryMemberRepository() 를 호출한다.
2. orderService 빈을 만드는 코드도 동일하게 memberRepository() 를 호출. --> 이 메서드를 호출하면 new MemoryMemberRepository() 를 호출한다.
요점 : 결과적으로 각각 다른 2개의 MemoryMemberRepository 가 생성되면서 싱글톤이 깨지는 것 처럼 보임 --> 스프링 컨테이너는 이 문제를 어떻게 해결할까?
--> 정답은 스프링이 초기화되면서 Bean 을 등록할때, 한번 호출한 인스턴스는, 또한번 호출하지 않음. --> 두번호출 X
--> 결론 : 스프링은 어떤 방법을 써서라도 싱글톤을 보장해줌.


// @Configuration 과 바이트코드 조작의 마법
스프링 컨테이너는 싱글톤 레지스트리임. 따라서 스프링 빈이 싱글톤이 되도록 보장해주어야 함. 그런데 스프링이 자바 코드까지 어떻게 하기는 어려움. AppConfig 자바 코드를
보면 분명 3번 호출되어야 하는 것이 맞음. 그래서 스프링은 클래스의 바이트코드를 조작하는 라이브러리를 사용함. 모든 비밀은 @Configuration 을 적용한 AppConfig 에 있음.
1. AnnotationConfigApplicationContext 에 파라미터로 넘긴 값은 스프링 Bean 으로 등록이 됨. --> 그래서 AppConfig 도 스프링 Bean 으로 등록됨.
2. 이 AppConfig Bean 을 조회해서 클래스 정보를 출력해보면 `SpringCGLIB` 가 후미에 붙음.
  : 순수한 클래스면 `class hello.core.AppConfig` 이어야하는데 `SpringCGLIB` 가 후미에 붙는 것임.
  --> 이 뜻은 스프링이 CGLIB 라는 바이트코드 조작 라이브러리를 사용해서 AppConfig 클래스를 상속받은 임의의 다른 클래스를 만들고, 그 다른 클래스를 스프링 빈으로 등록한 것임.
  --> 그 임의의 다른 클래스가 바로 싱글톤이 보장되도록 해줌. (실제로는 CGLIB 의 내부 기술을 사용하는데 매우 복잡함.
3. 결국 @Bean 이 붙은 메서드마다 이미 스프링 빈이 존재하면 존재하는 빈을 반환하고, 스프링 빈이 없으면 생성해서 스프링 빈으로 등록하고 반환하는 코드가 동적으로 만들어지는 것임
  --> 덕분에 싱글톤이 보장되는 것임.
참고 : AppConfig@CGLIB는 AppConfig 의 자식 타입이므로, AppConfig 타입으로 조회 할 수 있는 것임.

// @Configuration 을 적용하지 않고, @Bean 만 적용하면 어떻게 될까?
- @Configuration 을 붙이면 바이트코드를 조작하는 CGLIB 기술을 사용해서 싱글톤을 보장하지만,
- @Configuration 없이 @Bean 을 등록하면 CGLIB 기술 없이 순수한 AppConfig 로 스프링 빈에 등록됨. 하지만,
    --> MemberRepository 가 3번 호출됨. 1번은 @Bean 에의해 스프링컨테이너에 등록된 것임. 나머지 2번은 memberRepository() 를 호출하면서 발생한 코드
    --> 이는 싱글톤이 보장되지 않음을 의미함.

// 정리
- @Bean 만 사용해도 스프링 빈으로 등록되지만, 싱글톤을 보장하지 않는다.
- memberRepository() 처럼 의존관계 주입이 필요해서 메서드를 직접 호출할 때 싱글톤을 보장하지않는다.
- 크게 고민할 것이 없다. 스프링 설정 정보는 항상 @Configuration 을 사용하자