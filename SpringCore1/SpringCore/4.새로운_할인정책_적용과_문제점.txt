// 새로운 할인 정책 적용과 문제점
* 할인 정책을 애플리케이션에 적용해보자.
    1. 할인 정책을 변경하려면 클라이언트 코드인 OrderServiceImpl 를 고쳐야 한다.
    --> private DiscountPolicy discountPolicy = new FixDiscountPolicy(); 에서
    --> private DiscountPolicy discountPolicy = new RateDiscountPolicy(); 로 고쳐야함
    --> OCP 위반

** 문제점 발견 **
1. 역할과 구현을 충실하게 분리 --> OK
2. 다형성도 활용하고, 인터페이스와 구현 객체를 분리 --> OK
3. OCP, DIP 같은 객체지향 설계 원칙을 충실히 준수했다 --> X
    --> 그렇게보이지만 사실은 아님.
    --> DIP : OrderServiceImpl 은 DiscountPolicy 인터페이스에 의존하면서 DIP 를 잘 지킨것 같은데?
            : 클래스의 의존관계를 분석해보면 추상(인터페이스) 뿐만 아니라, 구체(구현) 클래스에도 의존하고 있음.
            : 추상 (인터페이스 ) 의존 : `DiscountPolicy`
            : 구체 (구현) 클래스 : `FixDiscountPolicy`, `RateDiscountPolicy`
    --> OCP : 변경하지 않고 확장할 수 있다고 했는데?
            : 지금 코드는 기능을 확장해서 변경하는 순간 (`FixDiscountPolicy` 를 `RateDiscountPolicy` 를 바꾸는 행위)
              클라이언트 코드(OrderServiceImpl)에도 영향을 줌. 따라서 OCP 를 위반함.

** 그렇다면 문제 해결을 어떻게? **
1. 클라이언트 코드인 OrderServiceImpl 은 DiscountPolicy 인터페이스뿐만아니라 구체 클래스도 함께 의존함. --> DIP 위반
2. 그래서 구체 클래스를 변경할 때 클라이언트 코드도 함께 변경해야 함
3. DIP 위반 --> 추상에만 의존하도록 변경 (인터페이스에만 의존)
결론:
    --> DIP 를 위반하지 않도록 인터페이스에만 의존하도록 의존관게를 변경하면됨.
    --> 이뜻은 구체클래스(`FixDiscountPolicy` 와 `RateDiscountPolicy`)를 OrderServiceImpl 에서 지워버려 DiscountPolicy 만 의존하도록 시키면됨.
    --> 그런데 OrderServiceImpl 에서 DiscountPolicy 의 구현체가 없는데, 이것이 실행이될까?
    --> 실제로 실행을 해보면 세상에서 제일 무서운 NPE (NullPointException) 가 터진다. --> 인터페이스만으로는 돌아갈수가 없음
    --> 아니 그렇다면 DIP 를 어떻게 지킬수을까?


** 진짜 해결 **
- 이 문제를 해결하려면 누군가 클라이언트 코드인 OrderServiceImpl 에 DiscountPolicy 의 구현 객체를 대신 생성하고 주입해주어야 함.