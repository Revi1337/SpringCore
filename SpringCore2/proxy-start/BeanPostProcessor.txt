* 빈 후처리기 - BeanPostProcessor
- 스프링이 Bean 저장소 에 등록할 목적으로 생성한 객체를 빈 저장소에 등록하기 직전에 조작하고 싶다면 BeanPostProcessor 를 사용하면된다.
  BeanPostProcessor 는 번역하면 빈 후처리기인데, 이름 그래도 Bean 을 생성한 후에 무언가를 처리하는 용도로 사용된다.

* BeanPostProcessor 기능
- BeanPostProcessor 의 기능은 막강하다.
- 객체를 조작할 수도 있고, 완전히 다른 객체로 바꿔치기 하는것도 가능하다.

* 빈 등록과정을 빈 후처리기와 함께 요약
1. 생성 : 스프링 빈 대상이되는 객체를 생성한다. (@Bean, ComponentScan 모두 포함)
2. 전달 : 생성된 객체를 빈 저장소에 등록하기 직전에 빈 후처리기에 전달한다.
3. 후 처리 작업 : 빈 후처리기는 전달된 스프링 빈 객체를 조작하거나 다른 객체로 바꿔치기할 수 있다.
4. 등록 : 빈 후처리기는 빈을 반환한다. 전달된 빈을 그대로 반환하면 해당 빈이 등록되고, 바꿔치기하면 다른 객체가 빈 저장소에 등록된다.

* BeanPostProcessor Interface
- BeanPostProcessor 를 사용하려면 BeanPostProcessor 인터페이스를 구현하고 스프링 빈으로 등록하면 된다.
- BeanPostProcessor 의 postProcessBeforeInitialization() 메서드는 @PostConstruct 같은 초기화가 발생하기 전에 호출되는 후처리기이다.
- BeanPostProcessor 의 postProcessAfterInitializaition() 메서드는 @PostConstruct 같은 초기화가 발생한 다음에 호출되는 후처리기이다.

* 정리
- 빈 후처리기는 빈을 조작하고 변경할 수 있는 Hooking 포인트임
- 이것은 Bean 객체를 조작하거나 심지어 다른 객체로 바꾸어 버릴 수 있을 정도록 막강하다.
- 여기서 조작이라는 것은 해당 객체의 특정 메서드를 호출하는 것을 뜻한다.
- 일반적으로 스프링 컨테이너가 등록하는, 특히 Component Scan 의 대상이 되는 Bean 들은 중간에 조작할 방법이 없는데, 이 BeanPostProcessor 를 사용하면
  개발자가 등록하는 모든 Bean 을 중간에 조작할 수 있다. 이 말은 빈 객체를 "프록시로 교체하는것도 가능" 하다는 의미이다.

* @PostConstruct 의 비밀
- @PostConstruct 는 스프링 빈 생성 이후에 빈을 초기화하는 역할. 그런데 생각해보면 Bean 의 초기화라는 것이 단순히 @PostConstruct 어노테이션이 붙은 초기화
  메서드를 한번 호출만 하면 된다. 쉽게 이야기해서 생성된 Bean 을 한번 조작하는 것이다. 따라서 Bean 을 조작하는 행위를 하는 적절한 빈후처리기가 있으면 될 것 같다.
- 스프링 CommonAnnotationBeanPostProcessor 라는 빈 후처리기를 자동으로 등록하는, 여기에서 @PostConstruct 애노테이션이 붙은 메서드를 호출한다. 따라서 스프링 스스로도
  스프링 내부의 기능을 확장하기 위해 빈 후처리기를 사용한다.

* 컴포넌트 스캔으로 등록한 Bean 들도 BeanPostProcessor 를 거친다.