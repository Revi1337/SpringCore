* 빈 후처리기 - BeanPostProcessor
- 스프링이 Bean 저장소 에 등록할 목적으로 생성한 객체를 빈 저장소에 등록하기 직전에 조작하고 싶다면 BeanPostProcessor 를 사용하면된다.
  BeanPostProcessor 는 번역하면 빈 후처리기인데, 이름 그래도 Bean 을 생성한 후에 무언가를 처리하는 용도로 사용된다.

* BeanPostProcessor 기능
- BeanPostProcessor 의 기능은 막강하다.
- 객체를 조작할 수도 있고, 완전히 다른 객체로 바꿔치기 하는것도 가능하다.

* 빈 등록과정을 빈 후처리기와 함께 요약
1. 생성 : 스프링 빈 대상이되는 객체를 생성한다. (@Bean, ComponentScan 모두 포함)
2. 전달 : 생성된 객체를 빈 저장소에 등록하기 직전에 빈 후처리기에 전달한다.
3. 후 처리 작업 : 빈 후처리기는 전달된 스프링 빈 객체를 조작하거나 다른 객체로 바꿔치기할 수 있다.
4. 등록 : 빈 후처리기는 빈을 반환한다. 전달된 빈을 그대로 반환하면 해당 빈이 등록되고, 바꿔치기하면 다른 객체가 빈 저장소에 등록된다.

* BeanPostProcessor Interface
- BeanPostProcessor 를 사용하려면 BeanPostProcessor 인터페이스를 구현하고 스프링 빈으로 등록하면 된다.
- BeanPostProcessor 의 postProcessBeforeInitialization() 메서드는 @PostConstruct 같은 초기화가 발생하기 전에 호출되는 후처리기이다.
- BeanPostProcessor 의 postProcessAfterInitializaition() 메서드는 @PostConstruct 같은 초기화가 발생한 다음에 호출되는 후처리기이다.

* 정리
- 빈 후처리기는 빈을 조작하고 변경할 수 있는 Hooking 포인트임
- 이것은 Bean 객체를 조작하거나 심지어 다른 객체로 바꾸어 버릴 수 있을 정도록 막강하다.
- 여기서 조작이라는 것은 해당 객체의 특정 메서드를 호출하는 것을 뜻한다.
- 일반적으로 스프링 컨테이너가 등록하는, 특히 Component Scan 의 대상이 되는 Bean 들은 중간에 조작할 방법이 없는데, 이 BeanPostProcessor 를 사용하면
  개발자가 등록하는 모든 Bean 을 중간에 조작할 수 있다. 이 말은 빈 객체를 "프록시로 교체하는것도 가능" 하다는 의미이다.

* @PostConstruct 의 비밀
- @PostConstruct 는 스프링 빈 생성 이후에 빈을 초기화하는 역할. 그런데 생각해보면 Bean 의 초기화라는 것이 단순히 @PostConstruct 어노테이션이 붙은 초기화
  메서드를 한번 호출만 하면 된다. 쉽게 이야기해서 생성된 Bean 을 한번 조작하는 것이다. 따라서 Bean 을 조작하는 행위를 하는 적절한 빈후처리기가 있으면 될 것 같다.
- 스프링 CommonAnnotationBeanPostProcessor 라는 빈 후처리기를 자동으로 등록하는, 여기에서 @PostConstruct 애노테이션이 붙은 메서드를 호출한다. 따라서 스프링 스스로도
  스프링 내부의 기능을 확장하기 위해 빈 후처리기를 사용한다.

* 컴포넌트 스캔으로 등록한 Bean 들도 BeanPostProcessor 를 거친다.

* 프록시의 적용 대상 여부를 여기서는 간단히 패키지를 기준으로 설정했다. 그런데 잘 생각해보면 포인트컷을 사용하면 더 깔끔할 것 같다.
* 포인트컧은 이미 클래스, 메서드 단위의 필터 기능을 가지고 있기 때문에, 프록시 적용 대상 여부를 정밀하게 설정할 수 있다.
* 참고로 어드바이저는 포인트컷을 가지고 있다. 따라서 어드바이저를 통해 포인트컷을 확인할 수 있다.
* 뒤에서 학습하겠지만 스프링 AOP 는 포인트컷을 사용해서 프록시 적용 대상 여부를 체크한다.
--> 결과적으로 포인트컷은 다음 두 곳에 사용된다. 프록시 적용 대상 여부를 체크해서 꼭 필요한 곳에만 프록시를 적용한다. (빈 후처리기 - 자동 프록시 생성)
--> 프록시의 어떤 메서드가 호출 되었을 때 어드바이스를 적용할지 판단한다.  (프록시 내부)

* Spring 이 제공하는 빈 후처리기1
- implementation 'org.springframework.boot:spring-boot-starter-aop' 를 해주어야 aspectjweaver 라는 aspectJ 관련 라이브러리를 등록하고
  스프링 부트가 AOP 관련 클래스를 자동으로 스프링 빈으로 등록한다.
- 예전에는 @EnableAspectJAutoProxy 를 직접 사용해야했는데, 이부분을 스프링부트가 자동으로 처리해준다.
- 참고로 스프링 부트가 활성화하는 autoconfigure 는 AopAutoConfiguration 이다.

* 자동 프록시 생성기 - AutoProxyCreator (AnnotationAwareAspectJAutoProxyCreator)
- 앞서 이야기한 스프링 부트 자동 설정으로 AnnotationAwareAspectJAutoProxyCreator 라는 BeanPostProcessor 가 스프링 빈으로 자동 등록된다.
- 이름 그대로 자동으로 프록시를 생성해주는 빈 후처리기이다.
- 이 빈 후처리기는 스프링 빈으로 등록된 Advisor 들을 자동으로 찾아서 프록시 필요한 곳에 자동으로 프록시를 적용해준다.
- Advisor 안에는 Pointcut 과 advice 가 이미 모두 포함되어있다. 따라서 Advisor 만 알고 있으면 그 안에 있는 Pointcut 으로 어떤
  스프링 빈에 프록시를 적용해야 할지 알 수 있다. 그리고 Advice 로 부가 기능을 적용하면 된다.
--> 참고. AnnotationAwareAspectJAutoProxyCreator 는 @AspectJ 와 관련된 AOP 기능도 자동으로 찾아서 처리해준다.
    Advisor 는 물론이고, @Aspect 도 자동으로 인식해서 프록시를 만들고 AOP 를 적용해준다. @Aspect 에 대한 자세한 내용은 뒤에 설명한다.

* 자동 프록시 생성기 - AutoProxyCreator 의 작동 과정
1. 생성 : 스프링이 스프링 빈 대상이 되는 객체를 생성한다. (@Bean, ComponentScan 모두 포함)
2. 전달 : 생성된 객체를 빈 저장소에 등록하기 직전에 빈 후처리기에 전달한다.
3. 모든 Advisor 빈 조회 : 자동 프록시 생성기 - 빈 후처리기는 스프링 컨테이너에서 모든 Advisor 를 조회한다.
4. 프록시 적용 대상 체크 : 앞서 조회한 Advisor 에 포함되어 있는 포인트컷을 사용해서 해당 객체가 프록시를 적용할 대상인지 아닌지 판단한다.
                        이때 객체의 클래스 정보는 물론이고, 해당 객체의 모든 메서드를 포인트컷에 하나하나 모두 매칭해본다. 그래서 조건이 하나라도
                        만족하면 프록시 적용 대상이 된다. 예를 들어서 10개의 메서드 중에 하나만 포인트컷 조건에 만족해도 프록시 적용 대상이 된다.
5. 프록시 생성 : 프록시 적용 대상이면 프록시를 생성하고 반환해서 프록시를 스프링 Bean 으로 등록한다. 만약 프록시 적용 대상이 아니라면 원본 객체를 반환해서
               원본 객체를 스프링 빈으로 등록한다.
6. 빈 등록 : 반환된 객체는 스프링 빈으로 등록된다.
--> 프록시를 만드는 단계에서 사용하는 Pointcut 과 실제 실행단계에서 사용하는 Pointcut 를 구분해서 이해해야 한다. (물론 같은 Pointcut 임)

* 중요. 포인트컷은 2가지에 사용된다.
1. 프록시 적용 여부 판단 - 생성 단계
- 자동 프록시 생성기는 포인트컷을 사용해서 해당 빈이 프록시를 생성할 필요가 있는지 없는지 체크한다.
- 클래스 + 메서드 조건을 모두 비교한다. 이 때 모든 메서드를 체크하는데, 포인트컷 조건에 하나하나 매칭해본다. 만약 조건에 맞는 것이 하나라도 있으면
  프록시를 생성한다.
2. 어드바이스 적용 여부 판단 - 사용 단계
- 프록시가 호출되었을 때 부가 기능인 어드바이스를 적용할지 말지 포인트컷을 보고 판단한다.