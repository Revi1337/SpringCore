* 핵심기능과 부가 기능을 분리
- 개발자들은 부가기능을 핵심기능에서 분리하고 한곳에서 관리하도록 하기위해서 Aspect 라는 개념을 만들었다.
- 참고로 스프링에서 제공하는 Advisor 도 Advice(부가기능) 과 Pointcut(적용대상) 을 가지고 있어서 개념상 하나의 Aspect 이다.
- Aspect 는 우리말로 해석하면 "관점" 이라는 뜻인데, 이름 그대로 애플리케이션을 바라보는 관점을
  하나하나의 기능에서 횡단 관심사 (cross cutting concerns) 관점으로 달리 보는 것을 의미한다.
  이렇게 Aspect 를 사용한 프로그래밍 방식을 관점 지향 프로그래밍 AOP(Aspect-Oriented Programming) 이라 한다.
--> 참고로 AOP 는 OOP 를 대체하기 위한 것이 아니라 횡단 관심사를 깔끔하게 처리하게 어려운 OOP 의 부족한 부분을 보조하는 목적으로 개발되었다.

* AspectJ 프레임워크
- AOP 의 대표적인 구현으로 AspectJ 프레임워크가 있다. 물론 스프링도 AOP 를 지원하지만, 대부분 AspectJ 의 문법을 차용하고, AspectJ 가 제공하는
  기능의 일부만 제공한다.
- AspectJ 프레임워크는 스스로를 다음과 같이 설명한다.
1. 자바 프로그래밍 언어에 대한 완벽한 관점 지향확장
2. 횡단 관심사의 깔끔한 모듈화
    - 오류 검사 및 처리
    - 동기화
    - 성능 최적화 (캐싱)
    - 모니터링 및 로깅