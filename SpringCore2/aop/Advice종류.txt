* 어드바이스 종류
- @Around : 메서드 호출 전후에 수행, 가장 강력한 Advice, JoinPoint 실행 여부 선택, 반환 값 변환, 예외 변환 등이 가능 (전체 기능)
- @Before : JoinPoint 실행 이전에 실행 (부분 기능)
- @AfterReturning : JoinPoint 가 정상 완료후 실행 (부분 기능)
- @AfterThrowing : 메서드가 예외를 던지는 경우 실행 (부분 기능)
- @After : JoinPoint 가 정상 또는 예외에 관계없이 실행(finally) (부분 기능)
--> @Around 를 제외한 마너지 Advice 들은 @Around 가 할 수 있는 일의 일부만 제공할 뿐이다. 따라서 @Argound 어드바이스만 사용해도
    필요한 기능을 모두 수행할 수 있다.

* 참고 정보 획득
- 모든 Advice 는 org.aspectj.lang.JoinPoint 를 첫번쨰 파라미터에 사용할 수 있다. (생략해도 된다.)
  단, @Around 는 ProceedingJoinPoint 를 사용해야 한다. (참고로 ProceddingJoinPoint 는 org.aspectj.lang.JoinPoint 의 하위 타입이다.)

* JoinPoint 인터페이스의 주요 기능
- getArgs() : 메서드의 인수를 반환
- getThis() : 프록시 객체를 반환
- getTarget() : 대상 객체를 반환
- getSignature() : 조언되는 메서드에 대한 설명을 반환
- toString() : 조언되는 방법에 대한 유용한 설명을 인쇄.

* 순서
스프링 5.2.7 부터 동일한 @Aspect 에서 동일한 JoinPoint 의 우선순위를 정했다.
- @Around -> @Before -> @After -> @AfterReturning -> @AfterThrowing
  (호출순서는 위와같고 리턴순서는 반대다)
- 물론 @Aspect 안에 동일한 종류의 어드바이스가 2개 있으면 순서는 보장되지 않는다. 이 경우 앞에서 배운것처럼 @Aspect 를 클래스단위로 분리하고 @Order 를 적용해야 한다.

* @Around 외에 다른 Advice 가 존재하는 이유
- 만약 @Around 에서 ProceedingJoinPoint.proceed() 를 호출하지 않으면 타겟이 호출되지 않는 치명적이 버그가 발생한다.
  하지만 @Before 를 사용하면 이러한 실수를 미리 방지할 수 있다.
--> 좋은 설계는 제약이 있는 것. @Around 만사용하면 실수할 가능성 UP. 하지만 역할별로 분리하여 @Before 를 사용하면 실수할 가능성을 Down 할 수 있다.
    또한, @Before 를 통해 코드의 의도가 명확하게 들어날 수 있다.