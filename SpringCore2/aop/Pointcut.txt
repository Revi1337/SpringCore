* Pointcut 지시자
- AspectJ 는 포인트컷을 편리하게 표현하기 위해 특별한 표현식을 제공 --> 예) @Pointcut("execution(* hello.aop.order..*(..))")
- Pointcut 표현식은 AspectJ Pointcut Expression 즉 AspectJ 가 제공하는 포인트컷 표현식을 줄여서 말하는 것이다.

* Pointcut 지시자
- 포인트컷 표현식은 execution 같은 포인트컷 지시자(Pointcut Designator) 로 시작한다, 줄여서 PCD 라 한다.

* Pointcut 지시자의 종류
1. execution : 메서드 실행 JoinPoint 를 매칭한다. 스프링 AOP 에서 가장 많이 사용하고 기능도 복잡하다.
2. within : 특정 타입 내의 조인 포인트를 매칭한다.
3. args : 인자가 주어진 타입의 인스턴스인 JoinPoint
4. this : 스프링 빈 객체(스프링 AOP 프록시) 를 대상으로 하는 조인 포인트
5. target : Target 객체(스프링 AOP 프록시가 가르키는 실제 대상) 을 대상으로 하는 JoinPoint
6. @target : 실행 객체의 클래스에 주어진 타입의 애노테이션이 있는 조인 포인트
7. @within : 주어진 애노테이션이 있는 타입 내 조인 포인트
8. @annotation : 메서드가 주어진 어노테이션을 가지고 있는 JoinPoint 를 매칭. (메서드 인수에 특정 annotation 이 있으면 대상 메서드가 AOP 프록시 대상)
9. @args : 전달된 실제 인수의 런타임 타입이 주어진 타입의 어노테이션을 갖는 JoinPoint
10. bean : 스프링 전용 포인트컷 지시자, 빈의 이름으로 포인트컷을 지정한다.
--> execution 을 가장 많이 사용하고 나머지는 자주 사용하지 않으니 execution 을 중점적으로 이해하자.


* execution
execution 문법
"""
    execution(접근제어자? 반환타입 선언타입?메서드이름(파라미터) 에외?)

    execution(public String hello.aop.order.aop.member.MemberServiceImpl.hello(String))
                                            |
    public java.lang.String hello.aop.order.aop.member.MemberServiceImpl.hello(java.lang.String)
"""
--> 메서드 실행 JoinPoint 를 매칭한다.
--> ? 는 생략할 수 있다.
--> * 같은 패턴을 지정할 수 있다.
--> 반환타입, 메서드이름, 파라미터는 꼭 명시해주어야한다.
--> 파라미터 에서의 (..) 는 파라미터의 타입과 파라미터 수가 상관없다는 뜻이다.
--> 파라미터에서는 정확한 타입을 명시해주어야한다. 다형성이 먹히지 않는다.

* within
--> 생략

* args
--> args 인자가 주어진타입의 인스턴스인 PointPoint 로 매칭
--> 기본 문법은 ecesution 의 args 와 같다.
--> execution 과 args 의 차이
    : execution 은 파라미터 타입이 정확하게 매칭되어야 한다. execution 은 클래스에 선언된 정보를 기반으로 판단한다. (메서드 시그니처를 보고 판단 (정적))
    : args 는 부모 타입을 허용한다. args 는 실제 넘어온 파라미터 객체 인스턴스를 보고 판단한다. (런타임에 전달된 인수로 판단 (동적))
--> args 는 단독으로 사용되기 보다는 뒤에서 설명할 파라미터 바인딩에서 주로 사용된다.


* @target, @within
정의
    --> @target : 실행 객체의 클래스에 주어진 타입의 어노테이션이 있는 조인 포인트
    --> @within : 주어진 어노테이션이 있는 타입 내 조인 포인트
설명
    --> @target, @within 은 다음과 같이 타입에 있는 어노테이션으로 AOP 적용 여부를 판단한다.
@target vs @within
    --> @target 은 인스턴스의 모든 메서드를 조인 포인트로 적용한다. (다형성이 잘동작함. 따라서 부모의 메서드에도 aop 가 먹힘)
    --> @within 은 해당 타입 내에 있는 메서드만 조인 포인트로 적용한다. (다형성이 동작하지않음. 따라서 자식의 메서드에만 aop 가 먹힘)
정리
    --> @target 은 인스턴스를 기준. @within 은 클래스 정보를 기준

* 주의사항
다음의 포인트컷 지시자는 단독으로 사용하면 안된다. (args, @args, @target)
--> args, @args, @target 는 실제 객체 인스턴스가 생성되고 실행될때 Advice 적용 여부를 확인할 수 있다.
--> 해당 3개의 포인트컷 지시자는 `execution(* hello.aop..*(..)) &&` 으로 어드바이스 적용 대상을 줄여주고 사용해야한다.


* @annotation
@annotation : 메서드가 주어진 애노테이션을 가지고 있는 조인 포인트를 매칭 --> 이놈은 그래도 자주 쓰임


* @args
@args : 전달된 실제 인수의 런타임 타입이 주어진 타입의 애노테이션을 갖는 조인 포인트
전달된 인수의 런타임 타입에 @Check 애노테이션이 있는 경우에 매칭한다. --> @args(test.Check)


* bean
bean : 스프링 전용 포인트컷 지시자, 빈의 이름으로 지정한다.
--> 스프링 빈의 이름으로 AOP 적용 여부를 지정한다. 이것은 스프링에서만 사용할 수 있는 특별한 지시자이다.
--> bean(orderService) || bean(*Repository) 와 같이 * 패턴을 사용할 수 있다
